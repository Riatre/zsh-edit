#!/bin/zsh
emulate -L zsh
zmodload zsh/complist
zmodload zsh/parameter
zmodload -F zsh/terminfo p:terminfo
zmodload -F zsh/zleparameter p:widgets
autoload -Uz add-zsh-hook
setopt $_edit_opts

local -a opts mopt
zparseopts -A opts -D -F -- d n u M:=mopt ||
    return

if [[ -v opts[-d] ]]; then
  local -a bindings dup_bindings=() all_bindings=( "${(f)$( bindkey $mopt[@] $@ )}" )
  local w
  for w in "${(@ko)widgets}"; do
    bindings=( ${(M)all_bindings:#* $w}  )
    (( $#bindings > 1 )) &&
        dup_bindings+=( $w $'\t'"${(pj:\t:)bindings[@]% $w}" )
  done
  print -raC2 $dup_bindings[@]

elif [[ -v opts[-n] ]]; then
  local -A names=()
  local -a match=() mbegin=() mend=()
  local key= code= name= expl=
  for key; do
    match=() name= code="${(g:ceo:)key}"
    while [[ -n $code ]]; do
      [[ -n $name && $name != *- ]] &&
          name+=' + '
      case $code in
        ( (#b)($'\e'[\[O]([ABCDFH]))* )
          case $match[2] in
            ( A ) name+='Up' ;;
            ( B ) name+='Down' ;;
            ( C ) name+='Right' ;;
            ( D ) name+='Left' ;;
            ( E ) name+='End' ;;
            ( H ) name+='Home' ;;
            ( Z ) name+='Shift-Tab' ;;
          esac
        ;;
        ( (#b)($'\e['([56])\~)* )
          case $match[2] in
            ( 5 ) name+='PageUp' ;;
            ( 6 ) name+='PageDown' ;;
          esac
        ;;
        ( (#b)($'\e'(\[[156]\;|O)(<2-16>)([ABCDFH~]))* )
          case $match[3] in
            (  2 ) name+='Shift' ;;
            (  3 ) name+='Alt' ;;
            (  4 ) name+='Shift-Alt' ;;
            (  5 ) name+='Control' ;;
            (  6 ) name+='Shift-Control' ;;
            (  7 ) name+='Alt-Control' ;;
            (  8 ) name+='Shift-Alt-Control' ;;
            (  9 ) name+='Meta' ;;
            ( 10 ) name+='Meta-Shift' ;;
            ( 11 ) name+='Meta-Alt' ;;
            ( 12 ) name+='Meta-Alt-Shift' ;;
            ( 13 ) name+='Meta-Ctrl' ;;
            ( 14 ) name+='Meta-Ctrl-Shift' ;;
            ( 15 ) name+='Meta-Ctrl-Alt' ;;
            ( 16 ) name+='Meta-Ctrl-Alt-Shift' ;;
          esac
          name+='-'
          case $match[4] in
            ( A ) name+='Up'    ;;
            ( B ) name+='Down'  ;;
            ( C ) name+='Right' ;;
            ( D ) name+='Left'  ;;
            ( F ) name+='End'   ;;
            ( H ) name+='Home'  ;;
            ( \~ )
              case $match[2] in
                ( '[5;' ) name+='PageUp' ;;
                ( '[6;' ) name+='PageDown' ;;
              esac
            ;;
          esac
        ;;
        ( (#b)(\+)*       ) name+='Plus' ;;
        ( (#b)(\-)*       ) name+='Minus' ;;
        ( (#b)($'\C-_')*  ) name+="Control-Minus" ;;
        ( (#b)(\ )*       ) name+='Space' ;;
        ( (#b)($'\C-@')*  ) name+='Control-Space' ;;
        ( (#b)($'\C-?')*  ) name+='Backspace' ;;
        ( (#b)($'\b')*    ) name+='Control-Backspace' ;;
        ( (#b)($'\n')*    ) name+="Enter" ;;
        ( (#b)($'\r')*    ) name+="Return" ;;
        ( (#b)($'\t')*    ) name+="Tab" ;;
        ( (#b)($'\e')     ) name+="Escape" ;;
        ( (#b)($'\e')*    ) name+="Alt-" ;;
        ( (#b)([$'\C-A'-$'\C-^'])* ) name+="Control-${(SM)${(q+)match[1]}%[A-_]}" ;;
        ( (#b)([[:upper:]])* ) name+="Shift-$match[1]" ;;
        ( (#b)([[:graph:]])* ) name+="${(U)match[1]}" ;;
        ( * )
          name+='??'
        ;;
      esac
      code="${code#$match[1]}"
    done
    names["$key"]=$name
  done
  print -rl -- ${${(fn)"$( print -raC2 -- "${(kv@)names}" )"}[@]%%[[:space:]]#}

elif [[ -v opts[-u] ]]; then
  local -a val=() keys=(
    \  {a..z} \; \' \, \. \/ \[ \] \\ \` {1..9}                      0 \- \= $'\C-?'
    $'\e'{O,\[}{A,B,C,D,F,H} $'\e['{2,3,5,6}\~
       {A..Z} \: \" \< \> \? \{ \} \| \~ \! \@ \# \$ \% \^ \& \* \( \) \_ \+ $'\e[Z'
    {$'\C-@'..$'\C-_'}
  )
  local k
  for k in $keys $'\e'$^keys; do
    [[ $( bindkey $mopt[@] $@ - $k )$( bindkey $mopt[@] $@ -p - $k ) == *'undefined-key' ]] &&
        val+=( ${${${${${(q+)k}//'\C-'/^}//'\\'/\\}#(|\$)[\']}%[\']} )
  done
  (( $#val )) &&
      print -cr - ${(q-)val}

else
  # Start each widget name with `.` to make autosuggestions & syntax highlighting ignore them.
  local -i i=
  for (( i = 2; i <= $#; i += 2 )); do
    argv[i]=.$argv[i]
    zle -N "$argv[i]" .edit.execute-cmd
  done
  bindkey $mopt[@] "$@"
fi
